# C
def F(x): #Nombra función
    return (2/3)*x+48
print(f'la estatura con 6 es {F(6):.1f} centimetros') #Evalúa función para un valor k
print(f"La estatura con 8 es {F(8):.1f} centimetros")

####################################
#D
import numpy as np
from scipy.optimize import fsolve
def edad(x): #Nombrar función para la V.I.
    return (2/3)*x+48-50 #Función igualada a 0
x = np.linspace(0, 12, 1) #Parámetros donde buscará solución
solucion=fsolve(edad, x)
print( f'si un niño mide 50 cm, su edad es de {solucion[0]:.1f} meses')

#################
#E
import matplotlib.pyplot as plt
import numpy as np

def F(x): #nombrar la función
    return (2/3)*x+48 #definir función

x = np.arange(0, 12, 1) #Define valores para el eje x: desde, hasta, diferencia

plt.plot(x, F(x), color='b') #Indicar lo que se grafica: x, función
plt.xlim(0 , 12) #Indica desde-hasta en eje x
plt.title('Estatura de un niño segun edad ') #Indica título del gráfico
plt.xlabel('Edad del niño en meses') #Nombre eje x
plt.ylabel('Altura pomedio en CM') #Nombre eje y

plt.grid(True) #Indicamos que haya cuadrícula
plt.show()


#################################
import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
def largo_cable(km):
    return x*1.85
km=0
x=int(input("Ingrese la cantidad de hora que desea: "))
print(f"EL total de cableado dentro de {x} horas es de {largo_cable(km):.1f}")

def cable(x): #nombrar la función
    return 1.85*x #definir función

x = np.arange(0, 3568, 1) #Define valores para el eje x: desde, hasta, diferencia

plt.plot(x, cable(x), color='b') #Indicar lo que se grafica: x, función
plt.xlim(0 , 3568) #Indica desde-hasta en eje x
plt.title('Cable instlado segun el tiempo transcurrido ') #Indica título del gráfico
plt.xlabel('Tiempo (horas)') #Nombre eje x
plt.ylabel('Cable instalado (KM)') #Nombre eje y

plt.grid(True) #Indicamos que haya cuadrícula
plt.show()
